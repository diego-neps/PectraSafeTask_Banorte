//------------------------------------------------------------------------------
// <auto-generated>
//   Este codigo fue generado por Pectra Forms
// 
//   Cambios en este archivo pueden ocasionar un comportamiento incorrecto.
// </auto-generated>
//------------------------------------------------------------------------------

using Dapper;
using Pectra.Forms.Utils.Encrypter;
using PectraForms.WebApplication.BackEnd.BusinessEntities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

namespace PectraForms.WebApplication.BackEnd.DataAccessComponents
{
    public static class AdjuntosDAC
    {
        public static List<AdjuntosBE> GetByParam(Dictionary<string, object> pConditionValues)
        {
            string szSqlWhere = string.Empty;
            List<AdjuntosBE> lstAdjuntos = new List<AdjuntosBE>();

            // Get ConnectionString
            string szCnnString = CnnStringProvider.GetDecryptedCnnStringByCnnKey("ConnectionStringKey");

            // Set Sql Where
            if (pConditionValues != null && pConditionValues.Any())
            {
                DynamicParameters oParameters = new DynamicParameters();

                foreach (KeyValuePair<string, object> oKeyValuePair in pConditionValues)
                {
                    if (string.IsNullOrWhiteSpace(szSqlWhere) == false)
                        szSqlWhere += " AND ";

                    szSqlWhere = string.Format("{0} [{1}] = @{1}", szSqlWhere, oKeyValuePair.Key);

                    // dynamic parameters
                    oParameters.Add(oKeyValuePair.Key, oKeyValuePair.Value);
                }

                if (string.IsNullOrWhiteSpace(szSqlWhere) == false)
                    szSqlWhere = "WHERE " + szSqlWhere;

                // Get values
                using (IDbConnection db = new SqlConnection(szCnnString))
                {
                    // szSqlWhere => WHERE [FieldA] = @ValueA AND [FieldB] = @ValueB
                    lstAdjuntos = db.Query<AdjuntosBE>("SELECT * FROM [Adjuntos] " + szSqlWhere, oParameters).ToList();
                }
            }

            return lstAdjuntos;
        }

        public static List<AdjuntosBE> GetAll()
        {
            throw new NotImplementedException();
        }

        public static void Insert(AdjuntosBE pAdjuntosBE)
        {
            // Get ConnectionString
            string szCnnString = CnnStringProvider.GetDecryptedCnnStringByCnnKey("ConnectionStringKey");

            // Insert
            using (IDbConnection db = new SqlConnection(szCnnString))
            {
                string szSqlQuery = "INSERT INTO [Adjuntos] ([IdGrupo], [Descripcion], [Archivo], [NombreArchivo], [Tipo], [IdUsuario], [IdPerfil], [IdRelacion]) " +
                                    "VALUES (@IdGrupo, @Descripcion, @Archivo, @NombreArchivo, @Tipo, @IdUsuario, @IdPerfil, @IdRelacion); " +
                                    "SELECT CAST(SCOPE_IDENTITY() AS int)";

                pAdjuntosBE.IdAdjunto = db.ExecuteScalar<int>(szSqlQuery, pAdjuntosBE);
            }
        }

        public static void Delete(int IdAdjunto)
        {
            // Get ConnectionString
            string szCnnString = CnnStringProvider.GetDecryptedCnnStringByCnnKey("ConnectionStringKey");

            // Get Values
            using (IDbConnection db = new SqlConnection(szCnnString))
            {
                string szSqlQuery = "DELETE FROM [Adjuntos] WHERE [IdAdjunto] = @IdAdjunto";
                db.Execute(szSqlQuery, new { IdAdjunto });
            }
        }
    }
}